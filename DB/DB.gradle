import io.deephaven.tools.Tools

configurations {
    compile.extendsFrom dhDb

    testCompile.extendsFrom dhDbTest, mxj, fishIoTest

    testRuntime.extendsFrom fishDataGenerator

}

sourceSets {
    main {
        java {
            srcDir 'java'
        }
        resources {
            srcDir 'groovy'
            include 'core/*.groovy'
        }
        resources {
            srcDir 'python'
            include 'core/*.py'

            // this includes all the empty directories from the java hierarchy, not sure how to exclude empty dirs
            //include '**/*.py'
            // manually specify instead
            include 'io/deephaven/ipykernel/*.py'
        }
        resources {
            srcDir 'resources'
            include '**'
        }
    }

    test {
        java {
            srcDirs 'src/benchmark/java', 'src/test/java'
        }
        resources {
            srcDirs += [ 'test-resources' ]
        }
    }
}

dependencies {
    compile project(':Util'),
            project(':CompilerTools'),
            project(':TableLogger'),
            project(':web-shared-beans'),
            project(':deephaven-jpy'),
            project(':deephaven-jpy-ext'),
            project(':Parquet'),
            project(':DHProcess'),
            project(':log-factory'),
            project(':Container'),
            project(':table-api'),
            project(':qst'),
            project(':engine-chunk'),
            project(':engine-vector'),
            project(':engine-tuple'),
            project(':engine-time'),
            "org.flywaydb:flyway-core:5.2.4",
            'com.github.f4b6a3:uuid-creator:3.6.0'

    annotationProcessor 'org.immutables:value:2.8.1'
    compileOnly project(':util-immutables')

    compileOnly 'javax.inject:javax.inject:1'

    testCompile TestTools.projectDependency(project, 'Util'),
            project(':BenchmarkSupport'),
            'org.openjdk.jmh:jmh-core:1.21'

    Classpaths.inheritAssertJ(project)

    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.21'

    testRuntime project(path: ':configs'), project(path: ':test-configs'), project(':Numerics'),
            TestTools.projectDependency(project, 'DB'),
            'org.openjdk.jmh:jmh-generator-annprocess:1.21'

    testRuntimeOnly project(':log-to-slf4j')
    Classpaths.inheritSlf4j(project, 'slf4j-simple', 'testRuntimeOnly')

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}
Classpaths.inheritJavaParser project

task jmhRun(type: JavaExec)  {
    new File("$rootDir/tmp/workspace").mkdirs()
    new File("$rootDir/tmp/logs").mkdirs()
    workingDir "$rootDir/tmp/workspace"

    classpath = sourceSets.test.runtimeClasspath

    main = 'io.deephaven.benchmarking.runner.BenchmarkRunner'

    // arguments to pass to the application
    jvmArgs '-DConfiguration.rootFile=dh-tests.prop',
            "-Ddevroot=$rootDir",
            "-Dworkspace=$rootDir/tmp/workspace",
            '-Dlog4j.configuration=log4j.teamcity.xml',
            '-Ddisable.pdsport.rotate=true',
            '-Dconfiguration.quiet=true',
            '-Djava.awt.headless=true',
            '-DQueryTable.memoizeResults=false',
            '-DUpdateGraphProcessor.checkTableOperations=false'
            '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=9500'
}

def createJmhTask = {
    taskName, cliArgs, heapSize='8g' -> tasks.create(taskName, JavaExec, { JavaExec task ->
        new File("$rootDir/tmp/workspace").mkdirs()
        new File("$rootDir/tmp/logs").mkdirs()

        task.workingDir "$rootDir/tmp/workspace"
        task.classpath = sourceSets.test.runtimeClasspath
        task.main = 'io.deephaven.benchmarking.runner.BenchmarkRunner'

        // arguments to pass to the application
        task.jvmArgs '-DConfiguration.rootFile=dh-tests.prop',
                    "-Ddevroot=$rootDir",
                    "-Dworkspace=$rootDir/tmp/workspace",
                    '-Dlog4j.configuration=log4j.teamcity.xml',
                    '-Ddisable.pdsport.rotate=true',
                    '-Dconfiguration.quiet=true',
                    '-Djava.awt.headless=true',
                    '-DQueryTable.memoizeResults=false',
                    '-DUpdateGraphProcessor.checkTableOperations=false',
                    "-Xmx$heapSize"
                    //'-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=9501'

        task.args cliArgs

        return
    })
}

createJmhTask('jmhRunSort', 'SortBenchmark')
createJmhTask('jmhRunSortMulti', 'SortMultiBenchmark')
createJmhTask('jmhRunRangeFilter', 'RangeFilterBenchmark')
createJmhTask('jmhRunNaturalJoin', 'NaturalJoinBenchmark')
createJmhTask('jmhRunSparseSelect', 'SparseSelectBenchmark')
createJmhTask('jmhRunRCS', 'RegionedColumnSourceBenchmark')
createJmhTask('jmhRunBy', 'ByBenchmark', '8g')

def createTestExecTask = {
    taskName, mainClass -> tasks.create(taskName, JavaExec, { JavaExec task ->
        task.workingDir "$rootDir"
        task.classpath = sourceSets.test.runtimeClasspath
        task.main = mainClass
        return
    })
}

def createMainExecTask = {
    taskName, mainClass -> tasks.create(taskName, JavaExec, { JavaExec task ->
        task.workingDir "$rootDir"
        task.classpath = sourceSets.main.runtimeClasspath
        task.main = mainClass
        return
    })
}

def createDeephavenTestExecTask = {
    taskName, mainClass -> tasks.create(taskName, JavaExec, { JavaExec task ->
        new File("$rootDir/tmp/workspace").mkdirs()
        new File("$rootDir/tmp/logs").mkdirs()

        task.workingDir "$rootDir"
        task.classpath = sourceSets.test.runtimeClasspath
        task.main = mainClass

        task.jvmArgs '-DConfiguration.rootFile=dh-tests.prop',
                    "-Ddevroot=$rootDir",
                    "-Dworkspace=$rootDir/tmp/workspace",
		    "-Dtest.output.dir=$rootDir/tmp/logs",
                    '-Dlog4j.configuration=log4j.teamcity.xml',
                    '-Ddisable.pdsport.rotate=true',
                    '-Dconfiguration.quiet=true',
                    '-Djava.awt.headless=true'

        return
    })
}

createDeephavenTestExecTask('sortKernelBenchmark', 'io.deephaven.engine.v2.sort.SortKernelBenchmark')
createDeephavenTestExecTask('partitionKernelBenchmark', 'io.deephaven.engine.v2.sort.PartitionKernelBenchmark')
createDeephavenTestExecTask('columnSourceFillBenchmark', 'io.deephaven.engine.v2.sources.ColumnSourceFillBenchmark')
createDeephavenTestExecTask('naturalJoinBenchmark', 'io.deephaven.benchmark.engine.NaturalJoinBenchmark')
createDeephavenTestExecTask('ajBenchmark', 'io.deephaven.benchmark.engine.AjBenchmark')
createDeephavenTestExecTask('matchFilterBenchmark', 'io.deephaven.benchmark.engine.MatchFilterBenchmark')
createDeephavenTestExecTask('rcsBenchmark', 'io.deephaven.benchmark.engine.RegionedColumnSourceBenchmark')
createDeephavenTestExecTask('byBenchmark', 'io.deephaven.benchmark.engine.ByBenchmark')
createDeephavenTestExecTask('sumByBenchmark', 'io.deephaven.benchmark.engine.SumByBenchmark')
createDeephavenTestExecTask('percentileByBenchmark', 'io.deephaven.benchmark.engine.PercentileByBenchmark')
createDeephavenTestExecTask('lastByBenchmark', 'io.deephaven.benchmark.engine.LastByBenchmark')

createTestExecTask('replicateTuples', 'io.deephaven.engine.v2.tuples.TupleSourceCodeGenerator')
createTestExecTask('replicateSortKernelTests', 'io.deephaven.engine.v2.sort.timsort.ReplicateSortKernelTests')
createMainExecTask('replicateSortKernel', 'io.deephaven.engine.v2.sort.ReplicateSortKernel')
createTestExecTask('replicateSourcesTest', 'io.deephaven.engine.v2.sources.ReplicateSourcesAndChunkTest')
createMainExecTask('replicateSources', 'io.deephaven.engine.v2.sources.ReplicateSourcesAndChunks')
createMainExecTask('replicateChunkFilters', 'io.deephaven.engine.v2.select.chunkfilters.ReplicateChunkFilters')
createMainExecTask('replicateHashing', 'io.deephaven.engine.v2.hashing.ReplicateHashing')
createMainExecTask('replicateStampKernel', 'io.deephaven.engine.v2.join.stamp.ReplicateStampKernel')
createMainExecTask('replicateDupCompactKernel', 'io.deephaven.engine.v2.join.dupcompact.ReplicateDupCompactKernel')
createMainExecTask('replicateDupExpandKernel', 'io.deephaven.engine.v2.join.dupexpand.ReplicateDupExpandKernel');
createDeephavenTestExecTask('replicateHashTable', 'io.deephaven.engine.v2.ReplicateHashTable')
createMainExecTask('replicateColumnChunkPageStores', 'io.deephaven.engine.v2.locations.parquet.ReplicateColumnChunkPageStores')
createMainExecTask('replicateReverseKernel', 'io.deephaven.engine.v2.utils.reverse.ReplicateReverseKernel')
createMainExecTask('replicateSegmentedSortedArray', 'io.deephaven.engine.v2.ssa.ReplicateSegmentedSortedArray')
createTestExecTask('replicateSegmentedSortedArrayTests', 'io.deephaven.engine.v2.ssa.ReplicateSegmentedSortedArrayTests')
createMainExecTask('replicateSegmentedSortedMultiset', 'io.deephaven.engine.v2.ssms.ReplicateSegmentedSortedMultiset')
createTestExecTask('replicateSegmentedSortedMultisetTests', 'io.deephaven.engine.v2.ssms.ReplicateSegmentedSortedMultisetTests')
createTestExecTask('replicateColumnSourceFillBenchmark', 'io.deephaven.engine.v2.sources.ReplicateColumnSourceFillBenchmark')
createMainExecTask('replicateSetInclusionKernel', 'io.deephaven.engine.v2.select.setinclusion.ReplicateSetInclusionKernel')
createMainExecTask('replicateRegions', 'io.deephaven.engine.v2.sources.regioned.ReplicateRegionsAndRegionedSources')
createMainExecTask('replicateToPage', 'io.deephaven.engine.v2.locations.parquet.topage.ReplicateToPage')
createMainExecTask('replicateVectors', 'io.deephaven.engine.vector.ReplicateVectors')
createMainExecTask('replicateVectorColumnWrappers', 'io.deephaven.engine.v2.dbarrays.ReplicateVectorColumnWrappers')
createMainExecTask('replicateCopyKernel', 'io.deephaven.engine.v2.utils.copy.ReplicateCopyKernel')
createMainExecTask('replicateUnboxerKernel', 'io.deephaven.engine.v2.utils.unboxer.ReplicateUnboxerKernel')
createMainExecTask('replicateOperators', 'io.deephaven.engine.v2.by.ReplicateOperators')
createMainExecTask('replicateFreezeBy', 'io.deephaven.engine.v2.utils.freezeby.ReplicateFreezeBy')

task replicate {
    dependsOn 'replicateTuples'
    dependsOn 'replicateSortKernelTests'
    dependsOn 'replicateSortKernel'
    dependsOn 'replicateSourcesTest'
    dependsOn 'replicateSources'
    dependsOn 'replicateChunkFilters'
    dependsOn 'replicateHashing'
    dependsOn 'replicateStampKernel'
    dependsOn 'replicateDupCompactKernel'
    dependsOn 'replicateDupExpandKernel'
    dependsOn 'replicateHashTable'
    dependsOn 'replicateReverseKernel'
    dependsOn 'replicateSegmentedSortedArray'
    dependsOn 'replicateSegmentedSortedMultiset'
    dependsOn 'replicateSegmentedSortedArrayTests'
    dependsOn 'replicateSegmentedSortedMultisetTests'
    dependsOn 'replicateColumnSourceFillBenchmark'
    dependsOn 'replicateRegions'
    dependsOn 'replicateToPage'
    dependsOn 'replicateVectors'
    dependsOn 'replicateVectorColumnWrappers'
    dependsOn 'replicateCopyKernel'
    dependsOn 'replicateUnboxerKernel'
    dependsOn 'replicateOperators'
    dependsOn 'replicateFreezeBy'
}

spotless {
    java {
        targetExclude(
                '**/generated/**',
                '**/**Boolean*.java',
                '**/**Byte*.java',
                '**/**Char*.java',
                '**/**Short*.java',
                '**/**Int*.java',
                '**/**Long*.java',
                '**/**Float*.java',
                '**/**Double*.java',
                '**/**Object*.java',
                '**/**StateManager.java',
                'src/main/java/io/deephaven/engine/v2/SymbolTableCombiner.java',
                'src/main/java/io/deephaven/libs/GroovyStaticImports.java',
                'src/test/java/**/*Sample.java'
        )
    }
}

test {


    // alas, we have tests that cannot tolerate running in parallel.  DO NOT INCREASE THIS NUMBER WITHOUT EXTENSIVE TESTING IN JENKINS
    maxParallelForks = Integer.parseInt(findProperty('dbTestJvms') as String ?: '1') // -PdbTestJvms=11 if you are ok pegging your local machine
    //  For now, if you apply @Category(ParallelTest.class) to tests which are not huge CPU/RAM hogs, you can get parallelism
    //  If you have CPU/RAM-heavy tasks that you don't want gumming up :DB:test runs, apply @Category(SerialTest.class) instead
    //  (note that the above only works for junit 4 tests; see the documentation on SerialTest class and others for porting instructions)


    def props = project.properties.subMap(["jpy.pythonLib", "jpy.jpyLib", "jpy.jdlLib"])
    systemProperties props
}

// Adds a custom testParallel task which is allowed to run tests in parallel.
// Add @Category(ParallelTest.class) to have your tests run in parallel
// Note: Supports JUnit4 or greater only (you use @Test annotations to mark test methods).

// The Parallel tests are now functionally equivalent to the Serial test logic
// TODO (deephaven-core#643): Fix "leaking" parallel tests
TestTools.addDbTest(project, 'Parallel', false, false, true)
// testSerial: non-parallel, not a engine test, isolated
TestTools.addDbTest(project, 'Serial', false, false, true)
// testOutOfBand: non-parallel, not a engine test, not isolated
TestTools.addDbTest(project, 'OutOfBand', false, false, false)

// The configuration of this with respect to the build environment isn't very tight.
// Ideally, the build environment would be able to configure this as appropriate.
tasks.testParallel.maxHeapSize = '6g'
tasks.testSerial.maxHeapSize = '6g'
tasks.testOutOfBand.maxHeapSize = '6g'
tasks.test.maxHeapSize = '6g'

Tools.applyAnnotationProcessorPathHacks(project, true)
