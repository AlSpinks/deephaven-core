{
 "className": "io.deephaven.engine.rowset.TrackingRowSet",
 "methods": {
  "findPrev": "Returns the position in [0..(size-1)] where the row key is found in the previous rowSet. If not found,\n then return (-(position it would be) - 1), as in Array.binarySearch.\n\n:param rowKey: (long) - The row key to search for\n:return: (long) A position from [0..(size-1)] if the row key was found. If the row key was not found, then\n         (-position - 1) as in Array.binarySearch",
  "firstRowKeyPrev": ":return: long",
  "getPrev": ":param pos: long\n:return: long",
  "getPrevRowSet": ":return: io.deephaven.engine.rowset.WritableRowSet",
  "indexer": "Get an opaque TrackingRowSet.Indexer object previously associated with this TrackingRowSet, or set and get one created\n with indexerFactory if this is the first invocation.\n\nNote: Java generics information - <INDEXER_TYPE extends io.deephaven.engine.rowset.TrackingRowSet.Indexer>\n\n:param indexerFactory: (java.util.function.Function<io.deephaven.engine.rowset.TrackingRowSet,INDEXER_TYPE>) - The indexer factory to be used if no indexer has been set previously\n:return: (INDEXER_TYPE) An opaque indexer object associated with this TrackingRowSet",
  "lastRowKeyPrev": ":return: long",
  "sizePrev": ":return: long",
  "writableCast": "Cast this RowSet reference to a WritableRowSet.\n\n:return: (io.deephaven.engine.rowset.TrackingWritableRowSet) this cast to a WritableRowSet"
 },
 "path": "io.deephaven.engine.rowset.TrackingRowSet",
 "text": "RowSet that internally tracks changes and maintains a consistent snapshot of its previous state, valid during\n the updating phase of its associated LogicalClock.\n \n Also adds support for hosting opaque index information.",
 "typeName": "interface"
}