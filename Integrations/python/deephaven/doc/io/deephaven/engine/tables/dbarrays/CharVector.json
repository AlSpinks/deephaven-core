{
 "className": "io.deephaven.engine.vector.CharVector",
 "methods": {
  "charValToString": ":param val: java.lang.Object\n:return: java.lang.String",
  "equals": "Helper method for implementing Object.equals(Object).\n\n:param aArray: (io.deephaven.engine.vector.CharVector) - The LHS of the equality test (always a CharVector)\n:param b: (java.lang.Object) - The RHS of the equality test\n:return: (boolean) Whether the two inputs are equal",
  "fillChunk": ":param destChunk: io.deephaven.engine.chunk.WritableChunk",
  "get": ":param i: long\n:return: char",
  "getComponentType": ":return: java.lang.Class",
  "getDirect": "Return a version of this Vector that is flattened out to only reference memory.\n\n:return: io.deephaven.engine.vector.CharVector",
  "hashCode": "Helper method for implementing Object.hashCode(). Follows the pattern in\n Arrays.hashCode(Object[]).\n\n:param array: (io.deephaven.engine.vector.CharVector) - The CharVector to hash\n:return: (int) The hash code",
  "primitiveCharValToString": ":param val: char\n:return: java.lang.String",
  "size": "The size of this data structure.\n\n:return: (long) The size",
  "subVector": ":param fromIndex: long\n:param toIndex: long\n:return: io.deephaven.engine.vector.CharVector",
  "subVectorByPositions": ":param positions: long[]\n:return: io.deephaven.engine.vector.CharVector",
  "toArray": ":return: char[]",
  "toChunk": ":return: io.deephaven.engine.chunk.Chunk<io.deephaven.engine.chunk.Attributes.Values>",
  "toString": "Helper method for implementing Object.toString().\n\n*Overload 1*  \n  :param prefixLength: int\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param array: (io.deephaven.engine.vector.CharVector) - The CharVector to convert to a String\n  :param prefixLength: (int) - The maximum prefix of the array to convert\n  :return: (java.lang.String) The String representation of array",
  "type": ":return: io.deephaven.qst.type.PrimitiveVectorType<io.deephaven.engine.vector.CharVector,java.lang.Character>"
 },
 "path": "io.deephaven.engine.vector.CharVector",
 "typeName": "interface"
}