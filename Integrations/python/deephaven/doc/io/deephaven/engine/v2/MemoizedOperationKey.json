{
 "className": "io.deephaven.engine.v2.MemoizedOperationKey",
 "methods": {
  "by": ":param aggregationStateFactory: io.deephaven.engine.v2.by.AggregationStateFactory\n:param groupByColumns: io.deephaven.engine.v2.select.SelectColumn[]\n:return: io.deephaven.engine.v2.MemoizedOperationKey",
  "byExternal": ":param dropKeys: boolean\n:param groupByColumns: io.deephaven.engine.v2.select.SelectColumn[]\n:return: io.deephaven.engine.v2.MemoizedOperationKey",
  "crossJoin": ":param rightTableCandidate: io.deephaven.engine.tables.Table\n:param columnsToMatch: io.deephaven.engine.tables.select.MatchPair[]\n:param columnsToAdd: io.deephaven.engine.tables.select.MatchPair[]\n:param numRightBitsToReserve: int\n:return: io.deephaven.engine.v2.MemoizedOperationKey.CrossJoin",
  "flatten": ":return: io.deephaven.engine.v2.MemoizedOperationKey",
  "reverse": ":return: io.deephaven.engine.v2.MemoizedOperationKey",
  "rollup": ":param comboAggregateFactory: io.deephaven.engine.v2.by.ComboAggregateFactory\n:param columns: io.deephaven.engine.v2.select.SelectColumn[]\n:param includeConstituents: boolean\n:return: io.deephaven.engine.v2.MemoizedOperationKey",
  "symbolTable": ":param symbolTableSource: io.deephaven.engine.v2.sources.regioned.SymbolTableSource\n:param useLookupCaching: boolean\n:return: io.deephaven.engine.v2.MemoizedOperationKey",
  "treeTable": ":param idColumn: java.lang.String\n:param parentColumn: java.lang.String\n:return: io.deephaven.engine.v2.MemoizedOperationKey",
  "wouldMatch": ":param pairs: io.deephaven.engine.tables.select.WouldMatchPair...\n:return: io.deephaven.engine.v2.MemoizedOperationKey.WouldMatch"
 },
 "path": "io.deephaven.engine.v2.MemoizedOperationKey",
 "text": "Keys for memoized operations on QueryTable.\n\n When a null key is returned from one of the static methods; the operation will not be memoized (e.g., if we might\n depend on the query scope; we can't memoize the operation).",
 "typeName": "class"
}