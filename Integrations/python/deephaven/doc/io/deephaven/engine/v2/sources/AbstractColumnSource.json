{
 "className": "io.deephaven.engine.v2.sources.AbstractColumnSource",
 "methods": {
  "allowsReinterpret": "Test if a reinterpret call will succeed.\n\nNote: Java generics information - <ALTERNATE_DATA_TYPE>\n\n:param alternateDataType: (java.lang.Class<ALTERNATE_DATA_TYPE>) - The alternative type to consider\n:return: (boolean) If a reinterpret on this column source with the supplied alternateDataType will succeed.",
  "defaultFillChunk": ":param context: io.deephaven.engine.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.engine.v2.sources.chunk.WritableChunk<? superio.deephaven.engine.v2.sources.chunk.Attributes.Values>\n:param rowSequence: io.deephaven.engine.structures.RowSequence",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.engine.v2.sources.chunk.WritableChunk<? superio.deephaven.engine.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made about\n        the size of the chunk shall be made. The chunk will be populated from position [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.structures.RowSequence) - An RowSequence representing the keys to be fetched",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.engine.v2.sources.chunk.WritableChunk<? superio.deephaven.engine.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.structures.RowSequence) - An RowSequence representing the keys to be fetched",
  "forEachGroup": "Consume all groups in a group-to-rowSet map.\n\nNote: Java generics information - <TYPE>\n\n:param groupToIndex: (java.util.Map<TYPE,io.deephaven.engine.v2.utils.RowSet>) - The group-to-rowSet map to consume\n:param groupConsumer: (java.util.function.BiConsumer<TYPE,io.deephaven.engine.v2.utils.MutableRowSet>) - Consumer for responsive groups",
  "forEachResponsiveGroup": "Consume all responsive groups in a group-to-rowSet map.\n\nNote: Java generics information - <TYPE>\n\n:param groupToIndex: (java.util.Map<TYPE,io.deephaven.engine.v2.utils.RowSet>) - The group-to-rowSet map to consume\n:param intersect: (io.deephaven.engine.v2.utils.RowSet) - Limit indices to values contained within intersect, eliminating empty result groups\n:param groupConsumer: (java.util.function.BiConsumer<TYPE,io.deephaven.engine.v2.utils.MutableRowSet>) - Consumer for responsive groups",
  "getComponentType": ":return: java.lang.Class<?>",
  "getGroupToRange": "**Incompatible overloads text - text from the first overload:**\n\nCompute grouping information for (at least) all keys present in rowSet.\n\n*Overload 1*  \n  :return: (java.util.Map<AbstractColumnSource.T,io.deephaven.engine.v2.utils.RowSet>) A map from distinct data values to an rowSet that contains those values\n  \n*Overload 2*  \n  :param rowSet: (io.deephaven.engine.v2.utils.RowSet) - The rowSet to consider\n  :return: (java.util.Map<AbstractColumnSource.T,io.deephaven.engine.v2.utils.RowSet>) A map from distinct data values to an rowSet that contains those values",
  "getType": ":return: java.lang.Class<AbstractColumnSource.T>",
  "getValueToRangeMap": "Get a map from unique, boxed values in this column to a long[2] range of keys.\n\nNote: Java generics information - <TYPE>\n\n:param rowSet: (io.deephaven.engine.v2.utils.TrackingRowSet) - The rowSet that defines the column along with the column source\n:param columnSource: (io.deephaven.engine.v2.sources.ColumnSource<TYPE>) - The column source that defines the column along with the rowSet\n:return: (java.util.Map<TYPE,long[]>) A new value to range map (i.e. grouping metadata)",
  "getValuesMapping": ":param subRange: io.deephaven.engine.v2.utils.RowSet\n:return: java.util.Map<AbstractColumnSource.T,io.deephaven.engine.v2.utils.RowSet>",
  "groupingToFlatSources": "Convert a group-to-rowSet map to a pair of flat in-memory column sources, one for the keys and one for the\n indexes.\n\n*Overload 1*  \n  Note: Java generics information - <TYPE>\n  \n  :param originalKeyColumnSource: (io.deephaven.engine.v2.sources.ColumnSource<TYPE>) - The key column source whose contents are reflected by the group-to-rowSet map\n          (used for typing, only)\n  :param groupToIndex: (java.util.Map<TYPE,io.deephaven.engine.v2.utils.RowSet>) - The group-to-rowSet map to convert\n  :return: (io.deephaven.base.Pair<io.deephaven.engine.v2.sources.ArrayBackedColumnSource<TYPE>,io.deephaven.engine.v2.sources.ObjectArraySource<io.deephaven.engine.v2.utils.TrackingMutableRowSet>>) A pair of a flat key column source and a flat rowSet column source\n  \n*Overload 2*  \n  Note: Java generics information - <TYPE>\n  \n  :param originalKeyColumnSource: (io.deephaven.engine.v2.sources.ColumnSource<TYPE>) - The key column source whose contents are reflected by the group-to-rowSet map\n          (used for typing, only)\n  :param groupToIndex: (java.util.Map<TYPE,io.deephaven.engine.v2.utils.RowSet>) - The group-to-rowSet map to convert\n  :param intersect: (io.deephaven.engine.v2.utils.RowSet) - Limit returned indices to values contained within intersect\n  :param responsiveGroups: (org.apache.commons.lang3.mutable.MutableInt) - Set to the number of responsive groups on exit\n  :return: (io.deephaven.base.Pair<io.deephaven.engine.v2.sources.ArrayBackedColumnSource<TYPE>,io.deephaven.engine.v2.sources.ObjectArraySource<io.deephaven.engine.v2.utils.TrackingMutableRowSet>>) A pair of a flat key column source and a flat rowSet column source",
  "match": ":param invertMatch: boolean\n:param usePrev: boolean\n:param caseInsensitive: boolean\n:param mapper: io.deephaven.engine.v2.utils.RowSet\n:param keys: java.lang.Object...\n:return: io.deephaven.engine.v2.utils.MutableRowSet",
  "reinterpret": "Provide an alternative view into the data underlying this column source.\n\nNote: Java generics information - <ALTERNATE_DATA_TYPE>\n\n:param alternateDataType: (java.lang.Class<ALTERNATE_DATA_TYPE>) - The alternative type to expose\n:return: (io.deephaven.engine.v2.sources.ColumnSource<ALTERNATE_DATA_TYPE>) A column source of the alternate data type, backed by the same underlying data.",
  "setGroupToRange": ":param groupToRange: java.util.Map<AbstractColumnSource.T,io.deephaven.engine.v2.utils.RowSet>"
 },
 "path": "io.deephaven.engine.v2.sources.AbstractColumnSource",
 "typeName": "class"
}