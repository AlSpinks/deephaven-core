{
 "className": "io.deephaven.engine.v2.sources.ObjectArraySource",
 "methods": {
  "copy": ":param sourceColumn: io.deephaven.engine.v2.sources.ColumnSource<? extendsObjectArraySource.T>\n:param sourceKey: long\n:param destKey: long",
  "copyFromChunk": ":param firstKey: long\n:param totalLength: long\n:param src: io.deephaven.engine.v2.sources.chunk.Chunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.Values>\n:param offset: int",
  "ensureCapacity": "Ensure that this WritableSource can accept rowSet keys in range [0, capacity).\n\n:param capacity: (long) - The new minimum capacity\n:param nullFill: (boolean) - Whether data should be \"null-filled\". If true, get operations at rowSet keys that have not been\n        set will return the appropriate null value; otherwise such gets produce undefined results.",
  "fillFromChunk": "Our default, inefficient, implementation. Inheritors who care should provide a better implementation.\n\n:param context: (io.deephaven.engine.v2.sources.WritableChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.engine.v2.sources.chunk.Chunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.Values>) - The source of the data rowSequence\n:param rowSequence: (io.deephaven.engine.structures.RowSequence) - An RowSequence representing the keys to be written",
  "fillFromChunkUnordered": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given key chunk.\n\n:param context: (io.deephaven.engine.v2.sources.WritableChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.engine.v2.sources.chunk.Chunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.Values>) - The source of the data RowSequence\n:param keys: (io.deephaven.engine.v2.sources.chunk.LongChunk<io.deephaven.engine.v2.sources.chunk.Attributes.RowKeys>) - A LongChunk representing the keys to be written",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.engine.v2.sources.chunk.WritableChunk<? superio.deephaven.engine.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.structures.RowSequence) - An RowSequence representing the keys to be fetched",
  "get": ":param index: long\n:return: ObjectArraySource.T",
  "getAndSetUnsafe": ":param index: long\n:param newValue: ObjectArraySource.T\n:return: ObjectArraySource.T",
  "getCapacity": "Get the capacity of this column source. This number is one higher than the highest key that may be accessed (read\n or written).\n\n:return: (long) The capacity of this column source",
  "getPrev": ":param index: long\n:return: ObjectArraySource.T",
  "getUnsafe": ":param index: long\n:return: ObjectArraySource.T",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker, typically a\n ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.engine.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.engine.v2.sources.ArraySourceHelper.FillContext) A context for use with fill operations",
  "makeFillFromContext": "Provide a default, empty WritableChunkSink.FillFromContext for use with our default WritableSource.fillFromChunk(io.deephaven.engine.v2.sources.WritableChunkSink.FillFromContext, io.deephaven.engine.v2.sources.chunk.Chunk<? extends io.deephaven.engine.v2.sources.chunk.Attributes.Values>, io.deephaven.engine.structures.RowSequence).\n\n:param chunkCapacity: int\n:return: io.deephaven.engine.v2.sources.WritableChunkSink.FillFromContext",
  "move": ":param source: long\n:param dest: long\n:param length: long",
  "resetWritableChunkToBackingStore": "Resets the given chunk to provide a write-through reference to our backing array.\n \n Note: This is unsafe to use if previous tracking has been enabled!\n\n:param chunk: (io.deephaven.engine.v2.sources.chunk.ResettableWritableChunk<?>) - the writable chunk to reset to our backing array.\n:param position: (long) - position that we require\n:return: (long) the first position addressable by the chunk",
  "set": ":param key: long\n:param value: ObjectArraySource.T",
  "startTrackingPrevValues": "Force my inheritors to implement this method, rather than taking the interface default."
 },
 "path": "io.deephaven.engine.v2.sources.ObjectArraySource",
 "typeName": "class"
}