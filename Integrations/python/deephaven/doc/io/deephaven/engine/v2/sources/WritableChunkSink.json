{
 "className": "io.deephaven.engine.v2.sources.WritableChunkSink",
 "methods": {
  "fillFromChunk": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given\n RowSequence.\n\n:param context: (io.deephaven.engine.v2.sources.WritableChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.engine.v2.sources.chunk.Chunk<? extendsWritableChunkSink.ATTR>) - The source of the data RowSequence\n:param RowSequence: (io.deephaven.engine.v2.utils.RowSequence) - An RowSequence representing the keys to be written",
  "fillFromChunkUnordered": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given key chunk.\n\n:param context: (io.deephaven.engine.v2.sources.WritableChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.engine.v2.sources.chunk.Chunk<? extendsWritableChunkSink.ATTR>) - The source of the data RowSequence\n:param keys: (io.deephaven.engine.v2.sources.chunk.LongChunk<io.deephaven.engine.v2.sources.chunk.Attributes.KeyIndices>) - A LongChunk representing the keys to be written",
  "makeFillFromContext": "Make a context suitable for the fillFromChunk(io.deephaven.engine.v2.sources.WritableChunkSink.FillFromContext, io.deephaven.engine.v2.sources.chunk.Chunk<? extends ATTR>, io.deephaven.engine.v2.utils.RowSequence) method.\n\n:param chunkCapacity: int\n:return: io.deephaven.engine.v2.sources.WritableChunkSink.FillFromContext"
 },
 "path": "io.deephaven.engine.v2.sources.WritableChunkSink",
 "typeName": "interface"
}