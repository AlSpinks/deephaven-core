{
 "className": "io.deephaven.engine.table.impl.sources.regioned.RegionedColumnSource",
 "methods": {
  "addRegion": "Add a region to this regioned column source.\n\n \n Elements in this region are ordered after elements in other regions added previously.\n\n:param columnDefinition: (io.deephaven.engine.tables.ColumnDefinition<?>) - The column definition for this column source (potentially varies by region)\n:param columnLocation: (io.deephaven.engine.table.impl.locations.ColumnLocation) - The column location for the region being added\n:return: (int) The rowSet assigned to the added region",
  "getElementIndex": "Get the element rowSet implied by a region rowSet and a region offset.\n\n:param regionIndex: int\n:param regionOffset: long\n:return: (long) The element rowSet for a particular region offset of a region rowSet",
  "getFirstElementIndex": "Get the first element rowSet for a region rowSet.\n\n:param regionIndex: int\n:return: (long) The first element rowSet for a region rowSet",
  "getLastElementIndex": "Get the last element rowSet for a region rowSet.\n\n:param regionIndex: int\n:return: (long) The last element rowSet for a region rowSet"
 },
 "path": "io.deephaven.engine.table.impl.sources.regioned.RegionedColumnSource",
 "text": "Regioned column source interface.\n\n \nsource tables can be thought of a tree of partitions with\n table locations at the leaf nodes. When building the\n TrackingMutableRowSet for such a table, we\n statically partition the available element address space from [0, 9223372036854775807L (2^63-1)].\n\n \n We constrain the size at these leaf nodes in order to support a partitioning of the element address space into region\n rowSet and sub-region element rowSet. In order to make the calculations as inexpensive as possible, this is done by\n assigning some bits of each rowSet key (element address) to the region rowSet, and\n the remaining bits to the sub-region element rowSet.\n\n \n This type of address space allocation allows very cheap O(1) element access. Denser alternatives tend to introduce\n more complication and/or O(log n) lookups.\n\n \n Currently, region indices use 20 and region offsets use\n 43, allowing tables to consist of 1048576 locations\n with 8796093022208L each.",
 "typeName": "interface"
}