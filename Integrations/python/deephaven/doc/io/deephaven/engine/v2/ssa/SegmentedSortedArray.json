{
 "className": "io.deephaven.engine.v2.ssa.SegmentedSortedArray",
 "methods": {
  "applyShift": ":param stampChunk: io.deephaven.engine.v2.sources.chunk.Chunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.Any>\n:param keyChunk: io.deephaven.engine.v2.sources.chunk.LongChunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.RowKeys>\n:param shiftDelta: long",
  "applyShiftReverse": ":param stampChunk: io.deephaven.engine.v2.sources.chunk.Chunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.Any>\n:param keyChunk: io.deephaven.engine.v2.sources.chunk.LongChunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.RowKeys>\n:param shiftDelta: long",
  "forAllKeys": "Call the longConsumer for each of the long rowSet keys in this SegmentedSortedArray.\n\n:param longConsumer: (java.util.function.LongConsumer) - the long consumer to call",
  "getFirst": ":return: (long) the first rowSet in this SSA, RowSet.NULL_ROW_KEY when empty.",
  "getLast": ":return: (long) the last rowSet in this SSA, RowSet.NULL_ROW_KEY when empty.",
  "getNodeSize": ":return: int",
  "insert": "Insert new valuesToInsert into this SSA. The valuesToInsert to insert must be sorted.\n\n:param valuesToInsert: (io.deephaven.engine.v2.sources.chunk.Chunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.Any>) - the valuesToInsert to insert\n:param indicesToInsert: (io.deephaven.engine.v2.sources.chunk.LongChunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.RowKeys>) - the corresponding indicesToInsert",
  "insertAndGetNextValue": "Note: Java generics information - <T extends io.deephaven.engine.v2.sources.chunk.Attributes.Any>\n\n:param valuesToInsert: io.deephaven.engine.v2.sources.chunk.Chunk<T>\n:param indicesToInsert: io.deephaven.engine.v2.sources.chunk.LongChunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.RowKeys>\n:param nextValue: io.deephaven.engine.v2.sources.chunk.WritableChunk<T>\n:return: int",
  "isReversed": ":return: boolean",
  "make": ":param chunkType: io.deephaven.engine.v2.sources.chunk.ChunkType\n:param reverse: boolean\n:param nodeSize: int\n:return: io.deephaven.engine.v2.ssa.SegmentedSortedArray",
  "makeChecker": ":return: io.deephaven.engine.v2.ssa.SsaChecker",
  "makeFactory": ":param chunkType: io.deephaven.engine.v2.sources.chunk.ChunkType\n:param reverse: boolean\n:param nodeSize: int\n:return: java.util.function.Supplier<io.deephaven.engine.v2.ssa.SegmentedSortedArray>",
  "remove": "Remove valuesToRemove from this SSA. The valuesToRemove to remove must be sorted.\n\n:param valuesToRemove: (io.deephaven.engine.v2.sources.chunk.Chunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.Any>) - the valuesToRemove to remove\n:param indicesToRemove: (io.deephaven.engine.v2.sources.chunk.LongChunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.RowKeys>) - the corresponding indices",
  "removeAndGetPrior": "Remove the values and indices referenced in stampChunk and indicesToRemove. Fill priorRedirections with the\n redirection value immediately preceding the removed value.\n\n:param stampChunk: (io.deephaven.engine.v2.sources.chunk.Chunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.Any>) - the values to remove\n:param indicesToRemove: (io.deephaven.engine.v2.sources.chunk.LongChunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.RowKeys>) - the indices (parallel to the values)\n:param priorRedirections: (io.deephaven.engine.v2.sources.chunk.WritableLongChunk<? extendsio.deephaven.engine.v2.sources.chunk.Attributes.RowKeys>) - the output prior redirections (parallel to valeus/indices)"
 },
 "path": "io.deephaven.engine.v2.ssa.SegmentedSortedArray",
 "typeName": "interface"
}