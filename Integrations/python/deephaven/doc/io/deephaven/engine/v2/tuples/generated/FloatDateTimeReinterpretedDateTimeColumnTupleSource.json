{
 "className": "io.deephaven.engine.v2.tuples.generated.FloatDateTimeReinterpretedDateTimeColumnTupleSource",
 "methods": {
  "createPreviousTuple": "Create a tuple for previous key column values at the supplied rowSet key.\n\n:param indexKey: (long) - The rowSet key\n:return: (io.deephaven.engine.util.tuples.generated.FloatLongLongTuple) The resulting tuple",
  "createTuple": "Create a tuple for key column values at the supplied rowSet key.\n\n:param indexKey: (long) - The rowSet key\n:return: (io.deephaven.engine.util.tuples.generated.FloatLongLongTuple) The resulting tuple",
  "createTupleFromReinterpretedValues": "Create a tuple for the supplied reinterpreted values (e.g., those that come from the getColumnSources after a\n reinterpretation by TupleSourceFactory).\n\n:param values: (java.lang.Object...) - The values\n:return: (io.deephaven.engine.util.tuples.generated.FloatLongLongTuple) The resulting tuple",
  "createTupleFromValues": "Create a tuple for the supplied (boxed) values.\n\n:param values: (java.lang.Object...) - The values\n:return: (io.deephaven.engine.util.tuples.generated.FloatLongLongTuple) The resulting tuple",
  "exportElement": "**Incompatible overloads text - text from the first overload:**\n\nExport a single element from the tuple, identified by its element rowSet, to an Object\n \n \n For the empty tuple, this is unsupported.\n \n For singles, this will copy the sole element, possibly in boxed form.\n \n For doubles and longer, this will copy the specified element without any unnecessary boxing.\n\n*Overload 1*  \n  Note: Java generics information - <ELEMENT_TYPE>\n  \n  :param tuple: (io.deephaven.engine.util.tuples.generated.FloatLongLongTuple) - The tuple to export an element from\n  :param elementIndex: (int) - The element rowSet to export\n  :param writableSource: (io.deephaven.engine.v2.sources.WritableSource<ELEMENT_TYPE>) - The destination\n  :param destinationIndexKey: (long) - The destination rowSet key\n  \n*Overload 2*  \n  :param tuple: (io.deephaven.engine.util.tuples.generated.FloatLongLongTuple) - The tuple to export an element from\n  :param elementIndex: (int) - The element rowSet to export\n  :return: java.lang.Object",
  "exportElementReinterpreted": "Export a single element from the tuple, identified by its element rowSet, to an Object. If the tuple has been\n internally reinterpreted, return the reinterpreted value.\n\n \n For the empty tuple, this is unsupported.\n \n For singles, this will copy the sole element, possibly in boxed form.\n \n For doubles and longer, this will copy the specified element without any unnecessary boxing.\n\n:param tuple: (io.deephaven.engine.util.tuples.generated.FloatLongLongTuple) - The tuple to export an element from\n:param elementIndex: (int) - The element rowSet to export\n:return: java.lang.Object",
  "exportToExternalKey": "Export this tuple's element list as a key suitable for the TableMaps resulting\n from Table.byExternal(boolean, java.lang.String...).\n \n For the empty tuple this is a unsupported.\n \n For singles, this is the (boxed) sole element itself.\n \n For doubles and longer, this is a newly-allocated \"SmartKey\".\n\n:param tuple: (io.deephaven.engine.util.tuples.generated.FloatLongLongTuple) - The tuple to export all elements from\n:return: (java.lang.Object) The new smart key"
 },
 "path": "io.deephaven.engine.v2.tuples.generated.FloatDateTimeReinterpretedDateTimeColumnTupleSource",
 "text": "TupleSource that produces key column values from ColumnSource types Float, DateTime, and Long.\n Generated by TupleSourceCodeGenerator.",
 "typeName": "class"
}