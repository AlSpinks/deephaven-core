{
 "className": "io.deephaven.engine.v2.utils.GroupingRowSetHelper",
 "methods": {
  "close": "Free any resources associated with this object.\n \n Using any RowSequence methods after close() is an error and may produce exceptions or undefined\n results.",
  "copyImmutableGroupings": ":param source: io.deephaven.engine.v2.tuples.TupleSource\n:param dest: io.deephaven.engine.v2.tuples.TupleSource",
  "getGrouping": "*Overload 1*  \n  :param thisRowSet: io.deephaven.engine.v2.utils.RowSet\n  :param indexOp: java.util.function.UnaryOperator<io.deephaven.engine.v2.utils.RowSet>\n  :param mappings: java.util.WeakHashMap<java.util.List<io.deephaven.engine.v2.sources.ColumnSource>,io.deephaven.engine.v2.utils.GroupingRowSetHelper.MappingInfo>\n  :param ephemeralMappings: java.util.WeakHashMap<java.util.List<io.deephaven.engine.v2.sources.ColumnSource>,io.deephaven.engine.v2.utils.GroupingRowSetHelper.MappingInfo>\n  :param tupleSource: io.deephaven.engine.v2.tuples.TupleSource\n  :return: java.util.Map<java.lang.Object,io.deephaven.engine.v2.utils.RowSet>\n  \n*Overload 2*  \n  :param tupleSource: io.deephaven.engine.v2.tuples.TupleSource\n  :return: java.util.Map<java.lang.Object,io.deephaven.engine.v2.utils.RowSet>",
  "getGroupingForKeySet": "Return a grouping that contains row keys that match the values in keys.\n\n:param keys: (java.util.Set<java.lang.Object>) - A set of values that TupleSource should match. For a single ColumnSource, the values\n        within the set are the values that we would like to find. For compound TupleSource instances, the\n        values are SmartKeys.\n:param tupleSource: (io.deephaven.engine.v2.tuples.TupleSource) - The tuple factory for singular or compound keys\n:return: (java.util.Map<java.lang.Object,io.deephaven.engine.v2.utils.RowSet>) A map from keys to RowSet, for each of the keys present in this row set's\n         view of tupleSource",
  "getPrevGrouping": ":param tupleSource: io.deephaven.engine.v2.tuples.TupleSource\n:return: java.util.Map<java.lang.Object,io.deephaven.engine.v2.utils.RowSet>",
  "getSubSetForKeySet": "Return a subset that contains row keys that match the values in keys.\n\n:param keys: (java.util.Set<java.lang.Object>) - A set of values that TupleSource should match. For a single ColumnSource, the values\n        within the set are the values that we would like to find. For compound TupleSource instances, the\n        values are SmartKeys.\n:param tupleSource: (io.deephaven.engine.v2.tuples.TupleSource) - The tuple factory for singular or compound keys\n:return: (io.deephaven.engine.v2.utils.RowSet) A MutableRowSet with all row keys from this RowSet whose value in tupleSource was present\n         in keys",
  "hasGrouping": ":param keyColumns: io.deephaven.engine.v2.sources.ColumnSource...\n:return: boolean"
 },
 "path": "io.deephaven.engine.v2.utils.GroupingRowSetHelper",
 "text": "Intermediate base class to separate grouping functionality from tracking functionality to be exposed in\n TrackingMutableRowSetImpl.",
 "typeName": "class"
}