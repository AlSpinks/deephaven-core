{
 "className": "io.deephaven.engine.table.impl.utils.MutableRowRedirection",
 "methods": {
  "applyShift": "Update this MutableRowRedirection according to a RowSetShiftData.\n\n:param tableRowSet: (io.deephaven.engine.table.impl.utils.RowSet) - A RowSet to filter which rows should be shifted\n:param shiftData: (io.deephaven.engine.table.impl.utils.RowSetShiftData) - The RowSetShiftData for this update",
  "fillFromChunk": "Insert mappings from each element in a RowSequence to the parallel element in a LongChunk. h\n\n:param fillFromContext: (io.deephaven.engine.table.impl.sources.WritableChunkSink.FillFromContext) - THe FillFromContext\n:param innerRowKeys: (io.deephaven.engine.chunk.Chunk<? extendsio.deephaven.engine.chunk.Attributes.RowKeys>) - The inner row keys to map to\n:param outerRowKeys: (io.deephaven.engine.structures.RowSequence) - The outer row keys to map from",
  "makeFillFromContext": "Make a WritableChunkSink.FillFromContext for this MutableRowRedirection. The default implementation\n supplies DEFAULT_FILL_FROM_INSTANCE, suitable for use with the default implementation of\n fillFromChunk(WritableChunkSink.FillFromContext , Chunk, RowSequence).\n\n:param chunkCapacity: (int) - The maximum number of mappings that will be supplied in one operation\n:return: (io.deephaven.engine.table.impl.sources.WritableChunkSink.FillFromContext) The WritableChunkSink.FillFromContext to use",
  "put": "Add or change a mapping from outerRowKey to innerRowKey.\n\n:param outerRowKey: (long) - The outer row key to map from\n:param innerRowKey: (long) - The inner row key to map to\n:return: (long) The inner row key previously mapped from outerRowKey, or RowSet.NULL_ROW_KEY if there was\n         no mapping",
  "putVoid": "Like put(long, long), but without requiring the implementation to provide a return value. May be more\n efficient in some cases.\n\n:param outerRowKey: (long) - The outer row key to map from\n:param innerRowKey: (long) - The inner row key to map to",
  "remove": "Remove a mapping from outerRowKey.\n\n:param outerRowKey: (long) - The outer row key to unmap\n:return: (long) The inner row key previously mapped from outerRowKey, or RowSet.NULL_ROW_KEY if there was\n         no mapping",
  "removeAll": "Remove the specified outerRowKeys.\n\n:param outerRowKeys: (io.deephaven.engine.structures.RowSequence) - The outer row keys to remove",
  "removeVoid": "Like remove(long) (long, long)}, but without requiring the implementation to provide a return value. May\n be more efficient in some cases.\n\n:param outerRowKey: (long) - The outer row key to map from",
  "startTrackingPrevValues": "Initiate previous value tracking."
 },
 "path": "io.deephaven.engine.table.impl.utils.MutableRowRedirection",
 "text": "Mutable RowRedirection.\n\n A MutableRowRedirection can be in one of two states: tracking prev values or not. The typical lifecycle looks like\n this:\n \n* A MutableRowRedirection is created with an initial map, but not tracking prev values. In this state, get() and\n getPrev() behave identically; put() and remove() affect current values but do no \"prev value\" tracking.\n * Prev value tracking begins when the caller calls startTrackingPrevValues(). Immediately after this call, the data\n is logically \"forked\": getPrev() will still refer to the same set of entries as before; this set will be frozen until\n the end of the generation.\n * Additionally, a terminal listener will be registered so that the prev map will be updated at the end of the\n generation.\n * Meanwhile, get(), put(), and remove() will logically refer to a fork of that map: it will initially have the same\n entries as prev, but it will diverge over time as the caller does put() and remove() operations.\n * At the end of the generation (when the TerminalListener runs), the prev set is (logically) discarded, prev gets\n current, and current becomes the new fork of the map.",
 "typeName": "interface"
}