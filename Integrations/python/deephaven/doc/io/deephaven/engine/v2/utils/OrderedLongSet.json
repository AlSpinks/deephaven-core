{
 "className": "io.deephaven.engine.table.impl.utils.OrderedLongSet",
 "methods": {
  "asRspBitmap": ":param t: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "fromChunk": "Produce a OrderedLongSet from a slice of a LongChunk of Attributes.OrderedRowKeys.\n\n:param keys: (io.deephaven.engine.chunk.LongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeys>) - The LongChunk of Attributes.OrderedRowKeys to build from\n:param offset: (int) - The offset in keys to begin building from\n:param length: (int) - The number of keys to include\n:param disposable: boolean\n:return: (io.deephaven.engine.table.impl.utils.OrderedLongSet) A new OrderedLongSet containing the specified slice of keys",
  "ixAppendRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixCardinality": ":return: long",
  "ixCompact": ":return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixContainsRange": ":param start: long\n:param end: long\n:return: boolean",
  "ixCowRef": ":return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixFind": ":param key: long\n:return: long",
  "ixFirstKey": ":return: long",
  "ixForEachLong": ":param lc: io.deephaven.engine.table.impl.utils.LongAbortableConsumer\n:return: boolean",
  "ixForEachLongRange": ":param larc: io.deephaven.engine.table.impl.utils.LongRangeAbortableConsumer\n:return: boolean",
  "ixGet": ":param pos: long\n:return: long",
  "ixGetAverageRunLengthEstimate": ":return: long",
  "ixGetKeysForPositions": ":param inputPositions: java.util.PrimitiveIterator.OfLong\n:param outputKeys: java.util.function.LongConsumer",
  "ixGetRowSequenceByKeyRange": ":param startKeyInclusive: long\n:param endKeyInclusive: long\n:return: io.deephaven.engine.structures.RowSequence",
  "ixGetRowSequenceByPosition": ":param startPositionInclusive: long\n:param length: long\n:return: io.deephaven.engine.structures.RowSequence",
  "ixGetRowSequenceIterator": ":return: io.deephaven.engine.structures.RowSequence.Iterator",
  "ixInsert": "*Overload 1*  \n  :param key: long\n  :return: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  \n*Overload 2*  \n  :param keys: io.deephaven.engine.chunk.LongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeys>\n  :param offset: int\n  :param length: int\n  :return: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  \n*Overload 3*  \n  :param added: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  :return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixInsertRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixInsertSecondHalf": ":param keys: io.deephaven.engine.chunk.LongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeys>\n:param offset: int\n:param length: int\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixInsertWithShift": ":param shiftAmount: long\n:param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixIntersectOnNew": ":param range: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixInvertOnNew": "Invert the given rowSet.\n\n:param keys: (io.deephaven.engine.table.impl.utils.OrderedLongSet) - OrderedLongSet of keys to invert\n:param maximumPosition: (long) - the largest position to add to indexBuilder, inclusive\n:return: (io.deephaven.engine.table.impl.utils.OrderedLongSet) the inverse of rowSet",
  "ixIsEmpty": ":return: boolean",
  "ixIterator": ":return: io.deephaven.engine.table.impl.utils.RowSet.Iterator",
  "ixLastKey": ":return: long",
  "ixMinusOnNew": ":param set: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixOverlaps": ":param impl: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: boolean",
  "ixOverlapsRange": ":param start: long\n:param end: long\n:return: boolean",
  "ixRangeIterator": ":return: io.deephaven.engine.table.impl.utils.RowSet.RangeIterator",
  "ixRangesCountUpperBound": ":return: long",
  "ixRefCount": ":return: int",
  "ixRemove": "*Overload 1*  \n  :param key: long\n  :return: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  \n*Overload 2*  \n  :param keys: io.deephaven.engine.chunk.LongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeys>\n  :param offset: int\n  :param length: int\n  :return: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  \n*Overload 3*  \n  :param removed: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  :return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRemoveRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRemoveSecondHalf": ":param keys: io.deephaven.engine.chunk.LongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeys>\n:param offset: int\n:param length: int\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRetain": ":param toIntersect: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRetainRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixReverseIterator": ":return: io.deephaven.engine.table.impl.utils.RowSet.SearchIterator",
  "ixSearchIterator": ":return: io.deephaven.engine.table.impl.utils.RowSet.SearchIterator",
  "ixShiftInPlace": ":param shiftAmount: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixShiftOnNew": ":param shiftAmount: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixSubindexByKeyOnNew": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixSubindexByPosOnNew": ":param startPos: long\n:param endPosExclusive: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixSubsetOf": ":param impl: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: boolean",
  "ixToRspOnNew": ":return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "ixUnionOnNew": ":param set: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixUpdate": ":param added: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:param removed: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixValidate": "*Overload 1*  \n  :param failMsg: java.lang.String\n  \n*Overload 2*",
  "twoRanges": ":param s1: long\n:param e1: long\n:param s2: long\n:param e2: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet"
 },
 "path": "io.deephaven.engine.table.impl.utils.OrderedLongSet",
 "text": "An ordered sequence of long values with set operations.",
 "typeName": "interface"
}