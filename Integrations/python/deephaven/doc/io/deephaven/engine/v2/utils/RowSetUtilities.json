{
 "className": "io.deephaven.engine.rowset.impl.RowSetUtil",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:param it: io.deephaven.engine.table.impl.utils.RowSet.RangeIterator\n:return: io.deephaven.base.log.LogOutput",
  "fillKeyIndicesChunk": ":param index: io.deephaven.engine.table.impl.utils.RowSet\n:param chunkToFill: io.deephaven.engine.chunk.WritableLongChunk<? extendsio.deephaven.engine.chunk.Attributes.RowKeys>",
  "fillKeyRangesChunk": ":param index: io.deephaven.engine.table.impl.utils.RowSet\n:param chunkToFill: io.deephaven.engine.chunk.WritableLongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeyRanges>",
  "forAllInvertedLongRanges": "This is equivalent to `sourceRowSet.invert(destRowSet).forAllRowKeyRanges(lrc)`, but requires O(1) space. Note\n that coalescing adjacent position-space runs enables callers to make minimal System.arraycopy calls.\n\n:param sourceRowSet: (io.deephaven.engine.table.impl.utils.RowSet) - rowSet to find the destRowSet keys in - ranges in the callback will be on this rowSet\n:param destRowSet: (io.deephaven.engine.table.impl.utils.RowSet) - rowSet values to look for within sourceRowSet\n:param lrc: (io.deephaven.engine.table.impl.utils.LongRangeConsumer) - consumer to handle each inverted range that is encountered",
  "rangeSearch": "Look for the biggest value of i that satisfies begin <= i <= end and comp.directionToTargetFrom(i) > 0, or some\n value that satisfies comp.directionToTargetFrom(i) == 0.\n\n:param begin: (long) - The beginning of the range (inclusive)\n:param end: (long) - The end of the range (inclusive)\n:param comp: (io.deephaven.engine.rowset.impl.RowSetUtil.Comparator) - a Comparator.\n:return: (long) the last position i inside the provided range that satisfies comp.directionToTargetFrom(i) > 0, or some\n         position that satisfies comp.directionToTargetFrom(i) == 0."
 },
 "path": "io.deephaven.engine.rowset.impl.RowSetUtil",
 "typeName": "class"
}