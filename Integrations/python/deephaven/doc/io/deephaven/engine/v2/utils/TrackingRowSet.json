{
 "className": "io.deephaven.engine.v2.utils.TrackingRowSet",
 "methods": {
  "copyImmutableGroupings": ":param source: io.deephaven.engine.v2.tuples.TupleSource\n:param dest: io.deephaven.engine.v2.tuples.TupleSource",
  "findPrev": "Returns the position in [0..(size-1)] where the row key is found in the previous rowSet. If not found, then\n return (-(position it would be) - 1), as in Array.binarySearch.\n\n:param rowKey: (long) - The row key to search for\n:return: (long) A position from [0..(size-1)] if the row key was found. If the row key was not found, then\n         (-position - 1) as in Array.binarySearch",
  "firstRowKeyPrev": ":return: long",
  "getGrouping": ":param tupleSource: io.deephaven.engine.v2.tuples.TupleSource\n:return: java.util.Map<java.lang.Object,io.deephaven.engine.v2.utils.RowSet>",
  "getGroupingForKeySet": "Return a grouping that contains row keys that match the values in keys.\n\n:param keys: (java.util.Set<java.lang.Object>) - A set of values that TupleSource should match. For a single ColumnSource, the values\n        within the set are the values that we would like to find. For compound TupleSource instances, the\n        values are SmartKeys.\n:param tupleSource: (io.deephaven.engine.v2.tuples.TupleSource) - The tuple factory for singular or compound keys\n:return: (java.util.Map<java.lang.Object,io.deephaven.engine.v2.utils.RowSet>) A map from keys to RowSet, for each of the keys present in this row set's\n         view of tupleSource",
  "getPrev": ":param pos: long\n:return: long",
  "getPrevGrouping": ":param tupleSource: io.deephaven.engine.v2.tuples.TupleSource\n:return: java.util.Map<java.lang.Object,io.deephaven.engine.v2.utils.RowSet>",
  "getPrevRowSet": ":return: io.deephaven.engine.v2.utils.MutableRowSet",
  "getSubSetForKeySet": "Return a subset that contains row keys that match the values in keys.\n\n:param keys: (java.util.Set<java.lang.Object>) - A set of values that TupleSource should match. For a single ColumnSource, the values\n        within the set are the values that we would like to find. For compound TupleSource instances, the\n        values are SmartKeys.\n:param tupleSource: (io.deephaven.engine.v2.tuples.TupleSource) - The tuple factory for singular or compound keys\n:return: (io.deephaven.engine.v2.utils.RowSet) A MutableRowSet with all row keys from this RowSet whose value in tupleSource was present\n         in keys",
  "hasGrouping": ":param keyColumns: io.deephaven.engine.v2.sources.ColumnSource...\n:return: boolean",
  "lastRowKeyPrev": ":return: long",
  "mutableCast": "Cast this RowSet reference to a MutableRowSet.\n\n:return: (io.deephaven.engine.v2.utils.TrackingMutableRowSet) this cast to a MutableRowSet",
  "sizePrev": ":return: long"
 },
 "path": "io.deephaven.engine.v2.utils.TrackingRowSet",
 "text": "RowSet that internally tracks changes and maintains a consistent snapshot of its previous state, valid during\n the updating phase of its associated\n LogicalClock.\n \n Also adds various methods for interacting with grouping information.",
 "typeName": "interface"
}