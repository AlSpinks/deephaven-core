{
 "className": "io.deephaven.engine.v2.utils.compact.CompactKernel",
 "methods": {
  "compact": "Compacts values into the front of the chunk, retaining only values where the parallel retainValues chunk has a\n true value.\n\n:param values: (io.deephaven.engine.chunk.WritableChunk<? extendsio.deephaven.engine.chunk.Attributes.Any>) - a chunk of values, input and output\n:param retainValues: (io.deephaven.engine.chunk.BooleanChunk<io.deephaven.engine.chunk.Attributes.Any>) - the values to retain",
  "compactAndCount": "**Incompatible overloads text - text from the first overload:**\n\nFor each run in valuesChunk, sort it, eliminate duplicates, and write the number of times a value occurred into\n the parallel slot within counts.\n\n*Overload 1*  \n  :param valueChunk: (io.deephaven.engine.chunk.WritableChunk<? extendsio.deephaven.engine.chunk.Attributes.Values>) - a chunk of values, input and output\n  :param counts: (io.deephaven.engine.chunk.WritableIntChunk<io.deephaven.engine.chunk.Attributes.ChunkLengths>) - an output chunk parallel to valueChunk with the number of times a value occurred\n  \n*Overload 2*  \n  :param valueChunk: (io.deephaven.engine.chunk.WritableChunk<? extendsio.deephaven.engine.chunk.Attributes.Values>) - a chunk of values, input and output\n  :param counts: (io.deephaven.engine.chunk.WritableIntChunk<io.deephaven.engine.chunk.Attributes.ChunkLengths>) - an output chunk parallel to valueChunk with the number of times a value occurred\n  :param countNull: (boolean) - if the compaction should count nulls or not\n  \n*Overload 3*  \n  :param valueChunk: (io.deephaven.engine.chunk.WritableChunk<? extendsio.deephaven.engine.chunk.Attributes.Values>) - a chunk of values, input and output\n  :param counts: (io.deephaven.engine.chunk.WritableIntChunk<io.deephaven.engine.chunk.Attributes.ChunkLengths>) - an output chunk parallel to valueChunk with the number of times a value occurred\n  :param startPositions: (io.deephaven.engine.chunk.IntChunk<io.deephaven.engine.chunk.Attributes.ChunkPositions>) - the start of each run\n  :param lengths: (io.deephaven.engine.chunk.WritableIntChunk<io.deephaven.engine.chunk.Attributes.ChunkLengths>) - the length of each run, input and output\n  \n*Overload 4*  \n  :param valueChunk: (io.deephaven.engine.chunk.WritableChunk<? extendsio.deephaven.engine.chunk.Attributes.Values>) - a chunk of values, input and output\n  :param counts: (io.deephaven.engine.chunk.WritableIntChunk<io.deephaven.engine.chunk.Attributes.ChunkLengths>) - an output chunk parallel to valueChunk with the number of times a value occurred\n  :param startPositions: (io.deephaven.engine.chunk.IntChunk<io.deephaven.engine.chunk.Attributes.ChunkPositions>) - the start of each run\n  :param lengths: (io.deephaven.engine.chunk.WritableIntChunk<io.deephaven.engine.chunk.Attributes.ChunkLengths>) - the length of each run, input and output\n  :param countNull: (boolean) - if the compaction should count nulls or not",
  "makeCompact": ":param chunkType: io.deephaven.engine.chunk.ChunkType\n:return: io.deephaven.engine.v2.utils.compact.CompactKernel"
 },
 "path": "io.deephaven.engine.v2.utils.compact.CompactKernel",
 "typeName": "interface"
}