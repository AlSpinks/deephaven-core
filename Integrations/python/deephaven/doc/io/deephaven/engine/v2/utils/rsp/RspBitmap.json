{
 "className": "io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
 "methods": {
  "add": ":param val: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "addRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "addRangeExclusiveEnd": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "addRangeUnsafe": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "addRangeUnsafeNoWriteCheck": "*Overload 1*  \n  :param first: long\n  :param last: long\n  \n*Overload 2*  \n  :param fromIdx: int\n  :param start: long\n  :param end: long\n  :return: int",
  "addRangesUnsafeNoWriteCheck": ":param rit: io.deephaven.engine.table.impl.utils.RowSet.RangeIterator",
  "addUnsafe": ":param val: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "addUnsafeNoWriteCheck": ":param val: long",
  "addValuesUnsafe": ":param values: io.deephaven.engine.chunk.LongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeys>\n:param offset: int\n:param length: int\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "addValuesUnsafeNoWriteCheck": ":param values: io.deephaven.engine.chunk.LongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeys>\n:param offset: int\n:param length: int",
  "and": "Return the logical and of two bitmaps as a new bitmap. This is equivalent to the intersection of the two bitmaps\n as sets.\n\n:param b1: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - a bitmap\n:param b2: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - a bitmap\n:return: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) b1 and b2 as a new bitmap.",
  "andEquals": "Removes every element from this bitmap that is not in the other bitmap.\n\n:param other: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "andEqualsUnsafe": ":param other: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "andNot": "Return the logical result of r1 and not r2 as a new bitmap. This is equivalent to removing every element in b2\n from b1. The arguments won't be modified.\n\n:param b1: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - a bitmap\n:param b2: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - a bitmap\n:return: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) b1 and not b2 as a new bitmap.",
  "andNotEquals": ":param other: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "andNotEqualsUnsafe": "Remove every element in other from this bitmap.\n\n:param other: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "andNotImpl": "Return the logical result of r1 and not r2 as a new RspArray. The arguments won't be modified.\n\n:param r1: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - an RspArray\n:param r2: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - an RspArray\n:return: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) r1 and not r2 as a new RspArray.",
  "append": ":param v: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "appendContainerUnsafeNoWriteCheck": ":param k: long\n:param c: io.deephaven.engine.table.impl.utils.rsp.container.Container",
  "appendFullBlockSpanUnsafeNoWriteCheck": ":param k: long\n:param slen: long",
  "appendRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "appendRangeUnsafe": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "appendRangeUnsafeNoWriteCheck": "*Overload 1*  \n  :param sHigh: long\n  :param start: long\n  :param end: long\n  \n*Overload 2*  \n  :param start: long\n  :param end: long",
  "appendShiftedUnsafeNoWriteCheck": ":param shiftAmount: long\n:param other: io.deephaven.engine.table.impl.utils.rsp.RspArray\n:param acquire: boolean",
  "appendUnsafe": ":param v: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "appendUnsafeNoWriteCheck": ":param v: long",
  "applyOffset": "Apply an offset to every value in this bitmap, mutating it.\n\n:param offset: (long) - The offset to apply.\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "applyOffsetImpl": ":param offset: long\n:param onZeroOffset: java.util.function.Supplier<io.deephaven.engine.table.impl.utils.rsp.RspBitmap>\n:param onAlignedOffset: java.util.function.Supplier<io.deephaven.engine.table.impl.utils.rsp.RspBitmap>\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "applyOffsetNoWriteCheck": ":param offset: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "applyOffsetOnNew": "Apply an offset to every value in this bitmap, returning a new bitmap (original is not changed).\n\n:param offset: (long) - The offset to apply.\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "containerForLowValueAndRange": ":param val: int\n:param start: int\n:param end: int\n:return: io.deephaven.engine.table.impl.utils.rsp.container.Container",
  "contains": ":param val: long\n:return: boolean",
  "deepCopy": "Get a deep copy of the current object, not shared with anybody.\n\n Note this is not thread safe.\n\n:return: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) A full, deep copy of this object with a reference count of 1 (not shared).",
  "equals": ":param o: java.lang.Object\n:return: boolean",
  "first": ":return: long",
  "hashCode": ":return: int",
  "insertTreeIndexUnsafeNoWriteCheck": "*Overload 1*  \n  :param ix: io.deephaven.engine.table.impl.utils.singlerange.SingleRange\n  \n*Overload 2*  \n  :param sr: io.deephaven.engine.table.impl.utils.sortedranges.SortedRanges\n  \n*Overload 3*  \n  :param rb: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "invert": ":param builder: io.deephaven.engine.table.impl.utils.LongRangeConsumer\n:param it: io.deephaven.engine.table.impl.utils.RowSet.RangeIterator\n:param maxPos: long",
  "ixAppendRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "ixCardinality": ":return: long",
  "ixCompact": ":return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixContainsRange": ":param start: long\n:param end: long\n:return: boolean",
  "ixCowRef": ":return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "ixFind": ":param key: long\n:return: long",
  "ixFirstKey": ":return: long",
  "ixForEachLong": ":param lc: io.deephaven.engine.table.impl.utils.LongAbortableConsumer\n:return: boolean",
  "ixForEachLongRange": ":param lc: io.deephaven.engine.table.impl.utils.LongRangeAbortableConsumer\n:return: boolean",
  "ixGet": ":param pos: long\n:return: long",
  "ixGetAverageRunLengthEstimate": ":return: long",
  "ixGetKeysForPositions": ":param inputPositions: java.util.PrimitiveIterator.OfLong\n:param outputKeys: java.util.function.LongConsumer",
  "ixGetRowSequenceByKeyRange": ":param startKeyInclusive: long\n:param endKeyInclusive: long\n:return: io.deephaven.engine.structures.RowSequence",
  "ixGetRowSequenceByPosition": ":param startPositionInclusive: long\n:param length: long\n:return: io.deephaven.engine.structures.RowSequence",
  "ixGetRowSequenceIterator": ":return: io.deephaven.engine.structures.RowSequence.Iterator",
  "ixInsert": "*Overload 1*  \n  :param key: long\n  :return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n  \n*Overload 2*  \n  :param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  :return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "ixInsertNoWriteCheck": ":param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "ixInsertRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "ixInsertSecondHalf": ":param values: io.deephaven.engine.chunk.LongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeys>\n:param offset: int\n:param length: int\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixInsertWithShift": "*Overload 1*  \n  :param shiftAmount: long\n  :param sr: io.deephaven.engine.table.impl.utils.sortedranges.SortedRanges\n  :return: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  \n*Overload 2*  \n  :param shiftAmount: long\n  :param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  :return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixIntersectOnNew": ":param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixInvertOnNew": "Invert the given rowSet.\n\n:param keys: (io.deephaven.engine.table.impl.utils.OrderedLongSet) - OrderedLongSet of keys to invert\n:param maximumPosition: (long) - the largest position to add to indexBuilder, inclusive\n:return: (io.deephaven.engine.table.impl.utils.OrderedLongSet) the inverse of rowSet",
  "ixIsEmpty": ":return: boolean",
  "ixIterator": ":return: io.deephaven.engine.table.impl.utils.RowSet.Iterator",
  "ixLastKey": ":return: long",
  "ixMinusOnNew": ":param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixOverlaps": ":param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: boolean",
  "ixOverlapsRange": ":param start: long\n:param end: long\n:return: boolean",
  "ixRangeIterator": ":return: io.deephaven.engine.table.impl.utils.RowSet.RangeIterator",
  "ixRangesCountUpperBound": ":return: long",
  "ixRefCount": ":return: int",
  "ixRemove": "*Overload 1*  \n  :param key: long\n  :return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n  \n*Overload 2*  \n  :param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n  :return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRemoveNoWriteCheck": ":param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRemoveRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRemoveSecondHalf": ":param values: io.deephaven.engine.chunk.LongChunk<io.deephaven.engine.chunk.Attributes.OrderedRowKeys>\n:param offset: int\n:param length: int\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRetain": ":param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRetainNoWriteCheck": ":param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRetainRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixRetainRangeNoWriteCheck": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixReverseIterator": ":return: io.deephaven.engine.table.impl.utils.RowSet.SearchIterator",
  "ixSearchIterator": ":return: io.deephaven.engine.table.impl.utils.RowSet.SearchIterator",
  "ixShiftInPlace": ":param shiftAmount: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "ixShiftOnNew": ":param shiftAmount: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "ixSubindexByKeyOnNew": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixSubindexByPosOnNew": ":param startPos: long\n:param endPosExclusive: long\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixSubsetOf": ":param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: boolean",
  "ixToRspOnNew": ":return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "ixUnionOnNew": ":param other: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixUpdate": ":param added: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:param removed: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixUpdateNoWriteCheck": ":param added: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:param removed: io.deephaven.engine.table.impl.utils.OrderedLongSet\n:return: io.deephaven.engine.table.impl.utils.OrderedLongSet",
  "ixValidate": ":param failMsg: java.lang.String",
  "last": ":return: long",
  "makeEmpty": ":return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "makeSingle": ":param v: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "makeSingleRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "or": "Return the logical or of two bitmaps as a new bitmap. This is equivalent to the union of the two bitmaps as sets.\n The arguments won't be modified.\n\n:param b1: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - a bitmap\n:param b2: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - a bitmap\n:return: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) b1 or b2 as a new bitmap.",
  "orEquals": "Add every element on other to this bitmap.\n\n:param other: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "orEqualsShifted": "For every key on other, add (key + shiftAmount) to this bitmap.\n\n:param shiftAmount: long\n:param other: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "orEqualsShiftedUnsafe": "For every key on other, add (key + shiftAmount) to this bitmap. Note shiftAmount is assumed to be a multiple of\n BLOCK_SIZE. Does not update cardinality cache. Caller must ensure finishMutations() is called before any\n operation depending on the cardinality cache being up to date are called.\n\n:param shiftAmount: long\n:param other: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "orEqualsUnsafe": "Add every element on other to this bitmap. Does not update cardinality cache. Caller must ensure\n finishMutations() is called before any operation depending on the cardinality cache being up to date are called.\n\n:param other: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "remove": ":param val: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "removeRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "removeRangeUnsafe": ":param start: long\n:param end: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "removeUnsafe": ":param val: long\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "removeUnsafeNoWriteCheck": "*Overload 1*  \n  :param val: long\n  :return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n  \n*Overload 2*  \n  :param val: long\n  :param blockKey: long\n  :param i: int",
  "subrangeByPos": "*Overload 1*  \n  :param firstPos: long\n  :param lastPos: long\n  :param returnNullIfEmptyResult: boolean\n  :return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n  \n*Overload 2*  \n  :param firstPos: long\n  :param lastPos: long\n  :return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "subrangeByValue": "*Overload 1*  \n  :param start: long\n  :param end: long\n  :param returnNullIfEmptyResult: boolean\n  :return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n  \n*Overload 2*  \n  :param start: long\n  :param end: long\n  :return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "subsetOf": ":param sr: io.deephaven.engine.table.impl.utils.sortedranges.SortedRanges\n:return: boolean",
  "toString": ":return: java.lang.String",
  "update": "Updates the bitmap by adding and removing the bitmaps given as parameter.\n\n:param added: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - Elements to add. Assumed disjoint with removed.\n:param removed: (io.deephaven.engine.table.impl.utils.rsp.RspBitmap) - Elements to remove. Assumed disjoint with added.\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "updateUnsafe": ":param added: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:param removed: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "updateUnsafeNoWriteCheck": ":param added: io.deephaven.engine.table.impl.utils.rsp.RspBitmap\n:param removed: io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
  "writeCheck": ":return: io.deephaven.engine.table.impl.utils.rsp.RspBitmap"
 },
 "path": "io.deephaven.engine.table.impl.utils.rsp.RspBitmap",
 "text": "See header comment on RspArray for explanation on space partitioning.",
 "typeName": "class"
}