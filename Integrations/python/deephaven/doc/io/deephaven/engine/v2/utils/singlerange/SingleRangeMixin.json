{
 "className": "io.deephaven.engine.v2.utils.singlerange.SingleRangeMixin",
 "methods": {
  "forEachLong": "For as long as the consumer wants more keys, call accept on the consumer with the individual key instances in\n this RowSequence, in increasing order.\n\n:param lc: (io.deephaven.engine.v2.utils.LongAbortableConsumer) - a consumer to feed the individual key values to.\n:return: (boolean) false if the consumer provided ever returned false, true otherwise.",
  "forEachLongRange": "For as long as the consumer wants more ranges, call accept on the consumer with the individual key ranges in this\n RowSequence, in increasing order.\n\n:param larc: (io.deephaven.engine.v2.utils.LongRangeAbortableConsumer) - a consumer to feed the individual key values to.\n:return: (boolean) false if the consumer provided ever returned false, true otherwise.",
  "getAverageRunLengthEstimate": "Get an estimate of the average (mean) length of runs of adjacent keys in this RowSequence.\n \n Implementations should strive to keep this method efficient (O(1) preferred) at the expense of accuracy.\n \n Empty RowSequence should return an arbitrary valid value, usually 1.\n\n:return: (long) An estimate of the average run length in this RowSequence, in [1, size()]",
  "getRowSequenceByKeyRange": "Get an ordered subset of the keys in this RowSequence for a key range. The returned set will be the\n intersection of the keys in this with the keys in the closed interval [startKeyInclusive,\n endKeyInclusive].\n\n The returned reference is owned by the caller, who should call close() when it is done with it.\n\n:param startKeyInclusive: (long) - The minimum key to include\n:param endKeyInclusive: (long) - The maximum key to include\n:return: (io.deephaven.engine.v2.utils.RowSequence) The subset as an RowSequence, which may be this",
  "getRowSequenceByPosition": "Get an ordered subset of the keys in this RowSequence for a position range. The result will contain the\n set of keys in this that lie at positions in the half-open range [startPositionInclusive,\n startPositionInclusive + length).\n\n The returned reference is owned by the caller, who should call close() when it is done with it.\n\n:param startPositionInclusive: (long) - The position of the first key to include\n:param length: (long) - The number of keys to include\n:return: (io.deephaven.engine.v2.utils.RowSequence) The subset as an RowSequence, which may be this",
  "getRowSequenceIterator": "Get an RowSequence.Iterator over this RowSequence.\n\n:return: (io.deephaven.engine.v2.utils.RowSequence.Iterator) A new iterator, positioned at the first key",
  "isContiguous": "Helper to tell you if this is one contiguous range.\n\n:return: boolean",
  "rangeEnd": ":return: long",
  "rangeStart": ":return: long",
  "rangesCountUpperBound": ":return: long",
  "size": "Get the number of keys in this RowSequence.\n\n:return: (long) The size, in [0, Long.MAX_VALUE]"
 },
 "path": "io.deephaven.engine.v2.utils.singlerange.SingleRangeMixin",
 "text": "This interface is really a mixin to avoid code duplication in the classes that implement it.",
 "typeName": "interface"
}