{
 "className": "io.deephaven.kafka.ingest.JsonRecordUtil",
 "methods": {
  "getBigDecimal": "**Incompatible overloads text - text from the first overload:**\n\nReturns a BigDecimal from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.math.BigDecimal) A BigDecimal\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (java.math.BigDecimal) A BigDecimal",
  "getBigInteger": "Returns a BigInteger from a JsonRecord.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.math.BigInteger) A BigInteger\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonRecord from which to retrieve the value.\n  :return: (java.math.BigInteger) A BigInteger",
  "getBoolean": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Boolean from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.Boolean) A Boolean\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (java.lang.Boolean) A Boolean",
  "getBoxedByte": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Byte from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.Byte) A Byte\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (java.lang.Byte) A Byte",
  "getBoxedChar": "Returns a Character from a JsonRecord.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.Character) A Character\n  \n*Overload 2*  \n  :param tmpNode: com.fasterxml.jackson.databind.JsonNode\n  :return: java.lang.Character",
  "getBoxedDouble": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Double from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.Double) A Double\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (java.lang.Double) A Double",
  "getBoxedFloat": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Float from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.Float) A Float\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (java.lang.Float) A Float",
  "getBoxedInt": "**Incompatible overloads text - text from the first overload:**\n\nReturns an Integer from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.Integer) An Integer\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (java.lang.Integer) An Integer",
  "getBoxedLong": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Long from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.Long) A Long\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (java.lang.Long) A Long",
  "getBoxedShort": "Returns a Short from a JsonRecord.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.Short) A Short\n  \n*Overload 2*  \n  :param node: com.fasterxml.jackson.databind.JsonNode\n  :return: java.lang.Short",
  "getByte": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Deephaven byte (primitive byte with a reserved value for Null)\n from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (byte) A Deephaven byte (primitive byte with a reserved value for Null)\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (byte) A Deephaven byte (primitive byte with a reserved value for Null)",
  "getChar": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Deephaven char (primitive char with a reserved value for Null)\n from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (char) A Deephaven char (primitive char with a reserved value for Null)\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (char) A Deephaven char (primitive char with a reserved value for Null)",
  "getDBDateTime": "**Incompatible overloads text - text from the first overload:**\n\nReturns a DBDateTime from a JsonNode. Will try to infer precision of a long\n value to be parsed using DBTimeUtils autoEpochToTime. If the value in the JSON record\n is not numeric, this method will attempt to parse it as a Deephaven DBDateTime string\n (yyyy-MM-ddThh:mm:ss[.nnnnnnnnn] TZ).\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (io.deephaven.engine.tables.utils.DBDateTime) A DBDateTime\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (io.deephaven.engine.tables.utils.DBDateTime) A DBDateTime",
  "getDouble": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Deephaven double (primitive double with reserved values for null)\n from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (double) A Deephaven double (primitive double with reserved values for null)\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (double) A Deephaven double (primitive double with reserved values for null)",
  "getFloat": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Deephaven float (primitive float with reserved values for Null)\n from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (float) A Deephaven float (primitive float with reserved values for Null)\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (float) A Deephaven float (primitive float with reserved values for Null)",
  "getInt": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Deephaven int (primitive int with reserved values for null)\n from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (int) A Deephaven int (primitive int with reserved values for null)\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (int) A Deephaven int (primitive int with reserved values for null)",
  "getLong": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Deephaven long (primitive long with reserved values for Null)\n from a JsonRecord.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (long) A Deephaven long (primitive long with reserved values for Null)\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (long) A Deephaven long (primitive long with reserved values for null)",
  "getSetter": "Gets the appropriate JsonRecordSetter for the type of the Deephaven column to be populated.\n\n:param columnClass: (java.lang.Class) - Class of the column to be populated.\n:return: (io.deephaven.kafka.ingest.JsonRecordSetter) A JsonRecordSetter",
  "getShort": "**Incompatible overloads text - text from the first overload:**\n\nReturns a Deephaven short (primitive short with reserved values for Null)\n from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (short) A Deephaven short (primitive short with reserved values for Null)\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (short) A Deephaven short (primitive short with reserved values for Null)",
  "getString": "**Incompatible overloads text - text from the first overload:**\n\nReturns a String from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.String) A String\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (java.lang.String) A String",
  "getValue": "**Incompatible overloads text - text from the first overload:**\n\nReturns a generic Object from a JsonNode.\n\n*Overload 1*  \n  :param record: (io.deephaven.kafka.ingest.JsonRecord) - The JsonRecord from which to retrieve the value.\n  :param key: (java.lang.String) - The String key of the value to retrieve.\n  :return: (java.lang.Object) An Object\n  \n*Overload 2*  \n  :param node: (com.fasterxml.jackson.databind.JsonNode) - The JsonNode from which to retrieve the value.\n  :return: (java.lang.Object) An Object"
 },
 "path": "io.deephaven.kafka.ingest.JsonRecordUtil",
 "text": "Provides methods and classes for retrieving typed values from a JsonRecord. The embedded classes\n are used to connect set methods of RowSetter objects so they can be called without boxing\n primitive types as they are read.\nIf AllowMissingKeys is false in the JsonRecord being used and a requested key does not exist in the\n record, an IllegalArgumentException will be thrown. If missing keys are allowed, then the type-appropriate\n null value will be returned for get requests of missing keys.\nIf AllowNullValues is false in the JsonRecord being used and a requested key has a null value in the\n record, an IllegalArgumentException will be thrown. If null values are allowed, then the type-appropriate\n null value will be returned for get requests of a key whose value is null.",
 "typeName": "class"
}