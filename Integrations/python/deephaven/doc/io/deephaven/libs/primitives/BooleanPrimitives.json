{
 "className": "io.deephaven.libs.primitives.BooleanPrimitives",
 "methods": {
  "and": "**Incompatible overloads text - text from the first overload:**\n\nAnds all of the values in the array together.\n\n*Overload 1*  \n  :param values: (java.lang.Boolean...) - values.\n  :return: (java.lang.Boolean) logical and of all the values in the array.\n  \n*Overload 2*  \n  :param values: (boolean...) - values.\n  :return: (java.lang.Boolean) logical and of all the values in the array.\n  \n*Overload 3*  \n  :param values: (io.deephaven.engine.tables.dbarrays.ObjectVector<java.lang.Boolean>) - values.\n  :return: (java.lang.Boolean) logical and of all the values in the array.\n  \n*Overload 4*  \n  :param values: (java.lang.Boolean[]) - values.\n  :param nullValue: (java.lang.Boolean) - value to use in place of null values.\n  :return: (java.lang.Boolean) logical and of all the values in the array.\n  \n*Overload 5*  \n  :param values: (io.deephaven.engine.tables.dbarrays.ObjectVector<java.lang.Boolean>) - values.\n  :param nullValue: (java.lang.Boolean) - value to use in place of null values.\n  :return: (java.lang.Boolean) logical and of all the values in the array.",
  "array": "Converts a primitive array to a DB array.\n\n:param values: (java.lang.Boolean[]) - primitive array\n:return: (io.deephaven.engine.tables.dbarrays.BooleanVector) DB array.",
  "count": "Counts the number of non-null values.\n\n:param values: (io.deephaven.engine.tables.dbarrays.BooleanVector) - values.\n:return: (int) number of non-null values.",
  "first": "Returns the first value from an array.\n\n*Overload 1*  \n  :param values: (java.lang.Boolean...) - values.\n  :return: (java.lang.Boolean) first value from the array.\n  \n*Overload 2*  \n  :param values: (boolean...) - values.\n  :return: (java.lang.Boolean) first value from the array.",
  "isNull": "Returns if a value is null.\n\n:param value: (java.lang.Boolean) - value.\n:return: (boolean) true if the value is null, and false otherwise.",
  "last": "Returns the last value from an array.\n\n*Overload 1*  \n  :param values: (java.lang.Boolean...) - values.\n  :return: (java.lang.Boolean) last value from the array.\n  \n*Overload 2*  \n  :param values: (boolean...) - values.\n  :return: (java.lang.Boolean) last value from the array.",
  "not": "Not of all values in an array.\n\n*Overload 1*  \n  :param values: (java.lang.Boolean...) - values.\n  :return: (java.lang.Boolean[]) logical not of all the values in the array.\n  \n*Overload 2*  \n  :param values: (boolean...) - values.\n  :return: (java.lang.Boolean[]) logical not of all the values in the array.",
  "nth": "Returns the nth value from an array.\n\n*Overload 1*  \n  :param index: (int) - rowSet of the value to return.\n  :param values: (io.deephaven.engine.tables.dbarrays.BooleanVector) - values.\n  :return: (java.lang.Boolean) nth value from the array or null, if the rowSet is outside of the array's rowSet range.\n  \n*Overload 2*  \n  :param index: (int) - rowSet of the value to return.\n  :param values: (java.lang.Boolean[]) - values.\n  :return: (java.lang.Boolean) nth value from the array or null, if the rowSet is outside of the array's rowSet range.",
  "nullToValue": "Replaces null values with a default value.\n\n*Overload 1*  \n  :param value: (java.lang.Boolean) - value.\n  :param defaultValue: (boolean) - default value to return for null values.\n  :return: (java.lang.Boolean) value, if value is not null, and defaultValue if value is null.\n  \n*Overload 2*  \n  :param values: (io.deephaven.engine.tables.dbarrays.BooleanVector) - values.\n  :param defaultValue: (boolean) - default value to return for null values.\n  :return: (java.lang.Boolean[]) value, if value is not null, and defaultValue if value is null.",
  "or": "**Incompatible overloads text - text from the first overload:**\n\nOrs all of the values in the array together.\n\n*Overload 1*  \n  :param values: (java.lang.Boolean...) - values.\n  :return: (java.lang.Boolean) logical or of all the values in the array.\n  \n*Overload 2*  \n  :param values: (boolean...) - values.\n  :return: (java.lang.Boolean) logical or of all the values in the array.\n  \n*Overload 3*  \n  :param values: (java.lang.Boolean[]) - values.\n  :param nullValue: (java.lang.Boolean) - value to use in place of null values.\n  :return: (java.lang.Boolean) logical or of all the values in the array.",
  "sum": "**Incompatible overloads text - text from the first overload:**\n\nReturns the sum of the values in an array.  For booleans, this is equivalent to \"or\".\n\n*Overload 1*  \n  :param values: (java.lang.Boolean...) - values.\n  :return: (java.lang.Boolean) sum of the values.  This is equivalent to \"or\".\n  \n*Overload 2*  \n  :param values: (boolean...) - values.\n  :return: (java.lang.Boolean) sum of the values.  This is equivalent to \"or\".",
  "vec": "Converts a DB array to a primitive array.\n\n:param values: (io.deephaven.engine.tables.dbarrays.BooleanVector) - DB array\n:return: (java.lang.Boolean[]) primitive array."
 },
 "path": "io.deephaven.libs.primitives.BooleanPrimitives",
 "text": "A set of commonly used functions that can be applied to Boolean types.",
 "typeName": "class"
}